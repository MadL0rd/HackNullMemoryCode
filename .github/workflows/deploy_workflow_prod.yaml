name: deploy for production

on:
    workflow_dispatch:
    push:
        branches:
            - 'main'

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - id: injectCredentialsStep
              name: Inject spreadsheet credentials
              run: |
                  echo $(pwd)
                  echo $(ls)
                  printf ${{ secrets.SPREADSHEET_CREDENTIALS }} >> credentials.json
                  echo $(ls)
            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Build and push
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/hack-null-memory-code:latest

    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - id: getProjectVersionStep
              name: Get project version
              run: |
                  PROJECT_VERSION=$(cat package.json | jq -r '.version')
                  echo "Detected project version: $PROJECT_VERSION"
                  echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_OUTPUT
            - name: executing remote ssh commands to deploy
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.DEPLOY_SERVER_USER }}
                  password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
                  command_timeout: 10m
                  stack_file_name: docker-compose.yaml
                  script: |
                      docker login -u ${{  secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
                      cd ${{ secrets.SERVER_CONFIG_REPO_FOLDER_NAME }}

                      PROJECT_VERSION=${{ steps.getProjectVersionStep.outputs.PROJECT_VERSION }}
                      export PROJECT_VERSION=$PROJECT_VERSION
                      echo ""
                      echo "Detected project version: $PROJECT_VERSION"
                      echo ""

                      export $(grep -v '^#' .env.prod | xargs)
                      export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
                      export FRONTEND_TAG=frontend.prod

                      docker compose -f docker-compose-prod.yml down
                      docker image rm -f ${{ secrets.DOCKERHUB_USERNAME }}/hack-null-memory-code:latest
                      docker compose -f docker-compose-prod.yml up -d
